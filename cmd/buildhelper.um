import (
	"std.um"								
)

fn readall(f: std.File): str {
    const blockSize = 16
    res := ""

    for ok := true; ok {
	    var buff: [blockSize + 1]char
	    ok = std.fread(f, ^[blockSize]char(&buff)) == 1
	    res += str([]char(buff))
    }

    return res
}

fn chcnt(chars: str, c: str): bool {
	for c2 in chars {
		if c == c2 {
			return true
		}
	}

	return false
}

fn strtoc(inp: str): str {
	out := ""
	out += "\""

	for c in inp {
		if chcnt("\"\n\t'\\", str(c)) {
			out += "\\"
		}

		if c == '\t' {
			out += "t"
		} else if c == '\n' {
			out += "n"
			out += "\"\n\""
		} else if c == '\r' {
		} else {
			out += str(c)
		}
	}

	out += "\""
	return out
}

fn main() {
	mode := std.argv(1)

	// embeds contents of a file as a string. TODO just as bytes
	if mode == "em" {
		printf("const char *%s[] = {\n", std.argv(2))
  
		for i:=3; i < std.argc(); i++ {
			f := std.fopen(std.argv(i), "r")
			data := readall(f)
			printf("%s\n", strtoc(data)+",")
			std.fclose(f)
		}
  
		printf("};\n")
	// creates a string array with args as values
	} else if mode == "argarr" {
		printf("const char *%s[] = { ", std.argv(2))
		for i:=3; i < std.argc(); i++ {
			printf("\"%s\", ", std.argv(i))
		}

		printf(" };\n")
		printf("int %s_count = %d;\n", std.argv(2), std.argc() - 3)
	}
}

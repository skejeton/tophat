
import (
	"th.um"
	"ent.um"
	"std.um"
	"rect.um"
	"atlas.um"
	"image.um"
	"input.um"
	"canvas.um"
	"shader.um"
	"window.um"
	"tilemap.um"
	"../strings.um"

	"../global.um"
)

var (
	atl: atlas.Atlas
	tm*: tilemap.Tilemap
	spawn*: th.Vf2

	coinPreset: ent.Ent
	coins*: []^ent.Ent

	plantPreset: ent.Ent
	plants*: []^ent.Ent

	score*: int

	lavaImg: image.Image
	lavaShader: shader.Shader
	lavaShaderOff: shader.Uniform

	end*: th.Vf2
	endImg: image.Image

	start*: int
)

var (
	bgColor: uint32 = 0x00ced1ff
)

fn setup*() {
	tms := strings.split(global.readall("tilemap.txt"), "\n")

	atl = atlas.mk(image.load("res/tile.png"), th.Vf2{1, 1})
	tm = tilemap.mk(make([]th.uu, len(tms) * len(tms[0])), len(tms[0]), atl, 1)
	tm.collMask = []bool{ true }
	tm.pos = th.Vf2{ -8 * global.tileSize, -8 * global.tileSize }

	coinPreset = ent.mk(image.load("res/coin.png"), th.Transform{ s: th.Vf2{ 1, 1 }, p: tm.pos})
	coinMid := coinPreset.i.getDims().div(th.Vf2{2, 2})
	coinPreset.t.p = coinPreset.t.p.add(coinMid)
	coinPreset.t.o = coinMid

	plantPreset = ent.mk(image.load("res/plant.png"), th.Transform{ s: th.Vf2{ 1, 1 }, p: tm.pos, o: th.Vf2{ 8, 8 }})

	lavaShader = shader.mkCanvas(global.readall("shaders/lava.vert"), global.readall("shaders/lava.frag"))
	lavaShaderOff = lavaShader.getUniformLocation("off")

	endImg = image.load("res/flag.png")
	start = th.time
}

fn reset*() {
	tms := strings.split(global.readall("tilemap.txt"), "\n")
	coins = []^ent.Ent{}
	plants = []^ent.Ent{}

	for i:=0; i < len(tm.cells); i++ {
		tm.cells[i] = 0
	}

	for y:=0; y < len(tms); y++ {
		for x:=0; x < len(tms[y]); x++ {
			p := th.Vf2{ x * global.tileSize + tm.pos.x, y * global.tileSize + tm.pos.y }

			switch tms[y][x] {
			case '#':
				tm.edit(x, y, 1)
			case 'c':
				c := new(ent.Ent)
				c^ = coinPreset
				c.t.p = p
				coins = append(coins, c)
			case 'p':
				pl := new(ent.Ent)
				pl^ = plantPreset
				pl.t.p = p
				plants = append(plants, pl)
			case 's':
				spawn = p
			case 'e':
				end = p
			}
		}
	}

	score = 0
}

fn handle*() {
	if input.isJustPressed(input.key_enter) {
		reset()
		start = th.time
	}
}

fn draw*() {
		canvas.drawRect(bgColor, rect.mk(0, 0, global.cam.w, global.cam.h))

		lavaShader.pickForCanvas()
			p := th.Vf2{0, global.cam.toScreen(tm.pos).y + len(tm.cells) / tm.w * global.tileSize * 1.5}
			lavaShaderOff.setVf2(global.cam.toWorld(p))	
			canvas.drawRect(th.white, rect.mk(p.x, p.y, global.cam.w, 4 * global.cam.h))
		shader.defaultCanvasShader.pickForCanvas()

		tm.draw(global.cam)
		rot := th.time % 8000 / 8000.0 * 360
		for i:=0; i < len(coins); i++ {
			coins[i].t.r = rot
			coins[i].draw(global.cam)
		}

		for i:=0; i < len(plants); i++ {
			plants[i].draw(global.cam)
		}

		endImg.draw(th.Transform{
			p: global.cam.toScreen(end),
			s: th.Vf2{ 1, 1 }})
}


import (
	"th.um"
	"rect.um"
	"image.um"
	"input.um"
	"canvas.um"
	"window.um"

	"images.um"
)

fn pixelsplit(inp: uint32): (uint8, uint8, uint8, uint8) {
	var ps: [4]uint8
	for i:=0; i < 4; i++ { ps[i] = uint8(inp >> (24 - (i * 8)) & 0xff) }
	return ps[0], ps[1], ps[2], ps[3]
}

fn pixelmerge(r, g, b, a: uint8): uint32 { return r << 24 | g << 16 | b << 8 | a }

fn main() {
	window.setup("image test", 600, 600)
	cam := rect.mk(0, 0, 600, 600)

	img := image.load("etc/test.png")
	printf("etc/test.png: %s\n", repr(img.validate()))

	img2 := img.copy()
	printf("copy: %s\n", repr(img2.validate()))
	data := img.getData()
	dm := img.getDims()
	for i in data {
		r, g, b, a := pixelsplit(data[i])
		avg := (r + g + b) / 3
		data[i] = pixelmerge(avg, avg, avg, a)
	}

	//img2 := image.mk(data, dm)
	img2.setData(slice(data, 0, trunc(dm.x * dm.y / 2)), th.Vf2{dm.x, dm.y / 2})

	target := image.mk(make([]uint32, 10 * 10), th.Vf2{10, 10})

	for window.cycle(cam) {
		p := th.Vf2{1, 1}

		canvas.drawText("drawOnQuad:", p, th.black, 2)
		p.y += 12

		img.drawOnQuad([4]th.Vf2{
			p.add(th.Vf2{10, 10}),
			p.add(th.Vf2{20, 15}),
			p.add(th.Vf2{20, 30}),
			p.add(th.Vf2{0, 35})})

		p.y += 36

		canvas.drawText("draw:", p, th.black, 2)
		p.y += 12

		dig := sqrt(
			img.getDims().x * img.getDims().x * 16 +
			img.getDims().y * img.getDims().y * 64)

		img.draw(th.Transform{
			s: th.Vf2{4, 8},
			p: th.Vf2{p.x + dig, p.y},
			r: 45}, 0xaaaaffaa)

		p.y += dig + 1

		canvas.drawText("placeholders:", p, th.black, 2)
		p.y += 12

		images.test.draw(th.Transform{
			s: th.Vf2{4, 4},
			p: p,
			r: 0})

		p.y += img.getDims().mulf(4).y

		canvas.drawText("copy, setData:", p, th.black, 2)
		p.y += 12
		img2.draw(th.Transform{
			s: th.Vf2{10, 10},
			p: p})
		
		p.y += img2.getDims().y * 10 + 1

		canvas.drawText("render target:", p, th.black, 2)
		p.y += 12

		target.makeRenderTarget()
			canvas.drawLine(th.cyan, th.Vf2{0, 0}, th.Vf2{50, 50}, 0.1)
			img.draw(th.Transform{
				s: th.Vf2{0.5, 0.5},
				p: th.Vf2{0, 0}})
		target.removeRenderTarget(cam)
		target.draw(th.Transform{s: th.Vf2{10, 10}, p: p})

		if input.isJustPressed('q') { break }
	}
}

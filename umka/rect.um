
import (
	"th.um"	
)

// A set of points representing a rectangle.
type Rect* = struct {
	x, y, w, h: th.fu
}

fn mk*(x, y, w, h: th.fu): Rect {
	var r: Rect

	r.x = x
	r.y = y
	r.w = w
	r.h = h

	return r
}

// translates screen coordinates to world coordinates with cam r
fn (r: ^rect.Rect) toWorld*(p: th.Vf2): th.Vf2 {
	return th.Vf2{ p.x + r.x - r.w/2, p.y + r.y - r.h/2 }
}

// translates world coordinates to screen coordinates with cam r
fn (r: ^rect.Rect) toScreen*(p: th.Vf2): th.Vf2 {
	return th.Vf2{ p.x - r.x + r.w/2, p.y - r.y + r.h/2 }
}

fn (r: ^rect.Rect) getPos*(): th.Vf2 {
	return th.Vf2{r.x, r.y}
}

fn (r: ^rect.Rect) getDims*(): th.Vf2 {
	return th.Vf2{r.w, r.h}
}

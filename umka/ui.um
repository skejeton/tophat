
import (
	"th.um"
	"utf8.um"
	"rect.um"
	"font.um"
	"input.um"
	"image.um"
	"canvas.um"
)

const (
	eventUnknown* = 0
	eventHover*
	eventPress*
	eventJustPress*
	eventRelease*
)

type Theme* = struct {
	fg, bg: uint32

	borderColor: uint32
	borderSize: th.fu
}

// A structure all elements have to contain. t can be set manually by the user,
// s being the dimensions, or it can be set by another elements. onEvent is an
// event callback. It will pass whatever is set in the ctx field.
// Event types:
// eventUnknown
// eventHover
// eventPress
// eventJustPress
// eventRelease
type Generic* = struct {
	r: rect.Rect
	gridPos: th.Vf2
	gridSpan: th.Vf2
	theme: Theme

	ctx: interface{}
	onEvent: fn(eventType: th.uu, ctx: interface{})
	pressed: bool
}

// An interface every ui element has to implements.
type Element* = interface {
	handle()
	draw()
	get(): ^Generic
}

// Interface used anywhere, where text is rendered.
type TextRenderer* = interface {
	draw(text: str, pos: th.Vf2, color: uint32, scale: th.fu)
	runeDims(rune: utf8.Rune): th.Vf2
}

// Bindings around canvas's font rendering functions to make them usable
// with the TextRenderer interface.
type PixelFont* = struct { }
fn (pf: ^PixelFont) draw*(text: str, pos: th.Vf2, color: uint32, scale: th.fu) {
	canvas.drawText(text, pos, color, scale)
}
fn (pf: ^PixelFont) runeDims*(rune: utf8.Rune): th.Vf2 {
	return th.Vf2{5, 5}
}

fn mkGeneric*(): Generic {
	g := Generic{}
	g.onEvent = fn(eventType: th.uu, ctx: interface{}) { }
	return g
}

// Functions that sets the grid pos of a Generic
fn (g: ^Generic) grid*(x, y: th.uu): ^Generic {
	g.gridPos.x = x
	g.gridPos.y = y
	return g
}

// Function setting the grid span of a Generic
fn (g: ^Generic) span*(x, y: th.uu): ^Generic {
	g.gridSpan.x = x
	g.gridSpan.y = y
	return g
}

// Generic's handle function. It checks for events. If you create your own
// ui element and want to have more control over how events are fired, you
// don't have to use it.
fn (g: ^Generic) handle*() {
	m := input.getMousePos()
	if m.x < g.r.x || m.y < g.r.y ||
		m.x > g.r.x + g.r.w || m.y > g.r.y + g.r.h {
		if g.pressed {
			g.pressed = false
			g.onEvent(eventRelease, g.ctx)
		}
		return
	}
	
	g.onEvent(eventHover, g.ctx)
	
	if input.isPressed(input.mouse1) {
		if !g.pressed {
			g.onEvent(eventJustPress, g.ctx)
		}

		g.onEvent(eventPress, g.ctx)
		g.pressed = true
	} else if g.pressed {
		g.pressed = false
		g.onEvent(eventRelease, g.ctx)
	}
}

fn drawBorder*(p, d: th.Vf2, t: Theme) {
	canvas.drawRect(t.borderColor, rect.mk(p.x, p.y, t.borderSize, d.y))
	canvas.drawRect(t.borderColor, rect.mk(p.x, p.y, d.x, t.borderSize))
	canvas.drawRect(t.borderColor, rect.mk(p.x + d.x - t.borderSize, p.y, t.borderSize, d.y))
	canvas.drawRect(t.borderColor, rect.mk(p.x, p.y + d.y - t.borderSize, d.x, t.borderSize))
}

// Module for getting keyboard and mouse input.
// Keycodes are ascii chars (lower case) and the constants below.
//   mouse1
//   mouse2
//   mouse3
//   key_shift
//   key_backspace
//   key_delete
//   key_left
//   key_right
//   key_up
//   key_down
//   key_escape
//   key_enter

import (
	"th.um"
	"std.um"
	"rect.um"
)

const (
	mouse1* =        char(1)
	mouse2* =        char(2)
	mouse3* =        char(3)
	mouse_up* =      char(4)
	mouse_down* =    char(5)
	key_shift* =     char(16)
	key_backspace* = char(8)
	key_delete* =    char(46)
	key_left* =      char(37)
	key_right* =     char(39)
	key_up* =        char(38)
	key_down* =      char(40)
	key_escape* =    char(27)
	key_enter* =     char(13)	
)

fn cgetmouse(out: ^th.Vf2)

// Returns the position of mouse cursor in relation to the screen.
fn getMousePos*(): th.Vf2 {
	out := th.Vf2{}
	cgetmouse(&out)
	return out
}

// Returns the position of mouse cursor in relation to cam.
fn getGlobalMousePos*(cam: rect.Rect): th.Vf2 {
	return cam.toWorld(getMousePos())
}

fn cispressed(keycode: char): int32

fn cisjustpressed(key: char): int32

// Returns true if key is pressed. Either use
// codes defined in the file above, or
// pass lower case char/number.
fn isPressed*(code: char): bool {
	val := bool(cispressed(code))
	return val
}

// Returns, whether code was just pressed
// this loop.
fn isJustPressed*(code: char): bool {
	return bool(cisjustpressed(code))
}

fn cclear*(code: char)
// Clears both the pressed and justPressed state of a code.
fn clear*(code: char) {
	cclear(code)
}

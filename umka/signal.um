// A module for importless communication between modules. A signal is an array
// of callbacks with a name.

type Any* = interface{}
type Callback* = fn(ctx: Any) 
type Signal* = []Callback

var signals: map[str]Signal

// Registers a callback to a signal. There is no need to explicitely create
// signals.
fn register*(name: str, callback: Callback) {
	if !valid(signals) {
		signals = make(map[str]Signal)
	}

	if !validkey(signals, name) {
		signals[name] = Signal{callback}
	} else {
		signals[name] = append(signals[name], callback)
	}
}

// Calls all callbacks associated with the passed name.
fn emit*(name: str, ctx: Any) {
	if !valid(signals) {
		signals = make(map[str]Signal)
	}

	for c in signals[name] {
		c(ctx)
	}
}

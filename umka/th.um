// Module with useful variables and types.
// Variables: time, delta, platform
// Constants: black, white, red, green, blue, yellow, magenta, cyan.

import (
	"std.um"
)

// standard type for real values
type fu* = real32
// standard type for integer values
type iu* = int32
// standard type for unsigned values
type uu* = uint32

// vector 2
type Vf2* = struct {
	x, y: fu
}

// Vf2 constructor
fn mkVf2*(x: fu = 0, y: fu = 0): Vf2 {
	return Vf2{x, y}
}

// rotates `p` around `origin` with `rot` in degrees
fn (p: ^th.Vf2) rotated*(origin: th.Vf2, rot: th.fu): th.Vf2 {
	angle := (rot * std.pi) / 180

	pos := p^
	pos.x -= origin.x
	pos.y -= origin.y

	x := pos.x * cos(angle) - pos.y * sin(angle)
	y := pos.x * sin(angle) + pos.y * cos(angle)

	pos.x = x + origin.x
	pos.y = y + origin.y

	return pos
}

// distance between p1 and p2
fn (p1: ^th.Vf2) distanceTo*(p2: th.Vf2): th.fu {
	return std.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y))
}

// Angle between p1 and p2
fn (p1: ^th.Vf2) angleTo*(p2: th.Vf2): real {
	if p1.x == p2.x && p1.y == p2.y { return 0 }
	return atan2(p2.y - p1.y, p2.x - p1.x) * 180 / std.pi + 180
}

// Absolute value of a vector.
fn (p: ^th.Vf2) abs*(): th.Vf2 {
	return th.Vf2{fabs(p.x), fabs(p.y)}
}

// Rounds a vector.
fn (p: ^th.Vf2) round*(): th.Vf2 {
	return th.Vf2{round(p.x), round(p.y)}
}

// Truncates a vector.
fn (p: ^th.Vf2) trunc*(): th.Vf2 {
	return th.Vf2{trunc(p.x), trunc(p.y)}
}

// Floors a vector.
fn (p: ^th.Vf2) floor*(): th.Vf2 {
	return th.Vf2{floor(p.x), floor(p.y)}
}

// Ceils a vector.
fn (p: ^th.Vf2) ceil*(): th.Vf2 {
	return th.Vf2{ceil(p.x), ceil(p.y)}
}

// Creates a vector with both x and y set to f
fn vf2f*(f: th.fu): th.Vf2 {
	return th.Vf2{f, f}
}

// Subtracts a vector from another one.
fn (p: ^th.Vf2) sub*(p2: th.Vf2): th.Vf2 {
	return th.Vf2{p.x - p2.x, p.y - p2.y}
}

// Subtracts a fu from a vector.
fn (p: ^th.Vf2) subf*(f: th.fu): th.Vf2 {
	return th.Vf2{p.x - f, p.y - f}
}

// Adds a vector to another one.
fn (p: ^th.Vf2) add*(p2: th.Vf2): th.Vf2 {
	return th.Vf2{p.x + p2.x, p.y + p2.y}
}

// Adds a fu to a vector.
fn (p: ^th.Vf2) addf*(f: th.fu): th.Vf2 {
	return th.Vf2{p.x + f, p.y + f}
}

// Divides a vector by another one.
fn (p: ^th.Vf2) div*(p2: th.Vf2): th.Vf2 {
	return th.Vf2{p.x / p2.x, p.y / p2.y}
}

// Divides a vector by a fu.
fn (p: ^th.Vf2) divf*(f: th.fu): th.Vf2 {
	return th.Vf2{p.x / f, p.y / f}
}

// Multiplies a vector by another one.
fn (p: ^th.Vf2) mul*(p2: th.Vf2): th.Vf2 {
	return th.Vf2{p.x * p2.x, p.y * p2.y}
}

// Multiplies a vector by a fu.
fn (p: ^th.Vf2) mulf*(f: th.fu): th.Vf2 {
	return th.Vf2{p.x * f, p.y * f}
}

// Returns the magnitude of a vector p.
fn (p: ^th.Vf2) mag*(): th.fu {
	return sqrt(p.x * p.x + p.y * p.y)
}

// Normalizes a vector.
fn (p: ^th.Vf2) norm*(): th.Vf2 {
	if p.x == 0 && p.y == 0 {
		return p^
	}

	return p.divf(p.mag())
}

// Calculates dot product between 2 vectors.
fn (p: ^th.Vf2) dot*(q: th.Vf2): fu {
	return p.x*q.x + p.y*q.y
}

// Struct defining transformation. Used for example by entities.
type Transform* = struct {
	p: Vf2 // position
	s: Vf2 // scale
	o: Vf2 // origin
	r: fu  // rotation
}

// Transform constructor
fn mkTransform*(p: Vf2, s: Vf2 = Vf2{1, 1}, o: Vf2 = Vf2{0, 0}, r: fu = 0.0): Transform {
	return Transform{p: p, s: s, o: o, r: r}
}

fn ctransformvf2(v: ^Vf2, t: ^Transform)
// Transforms a vf2 to another vf2.
// Order:
// 	1. scale
// 	2. rotation
// 	3. position
// 
// This allows conversion from a relative to an absolute vf2.
fn (v: ^Vf2) transformed*(t: Transform): Vf2 {
	ret := v^
	ctransformvf2(&ret, &t)
	return ret
}

type Quad* = [4]th.Vf2

fn ctransformquad(q: ^Quad, t: ^Transform)
// Transforms a quad into another quad.
// Order:
// 	1. scale
// 	2. rotation
// 	3. position
fn (q: ^Quad) transformed*(t: Transform): Quad {
	ret := q^
	ctransformquad(&ret, &t)
	return ret
}

fn cgetglobal(): ^struct{}
// returns a pointer to the th_global. Set this as your extensions thg.
fn getGlobal*(): ^struct{} {
	return cgetglobal()
}

fn cgetfuncs(): ^struct{}
// returns pointer to tophat functions. Pass this to th_ext_set.
fn getFuncs*(): ^struct{} {
	return cgetfuncs()
}

const (
	black* = 0xff
	white* = 0xffffffff
	red* = 0xff0000ff
	green* = 0x00ff00ff
	blue* = 0x0000ffff
	yellow* = 0xffff00ff
	magenta* = 0xff00ffff
	cyan* = 0x00ffffff
)

var (
	time*: uint
	delta*: int
	platform*: str = "linux"
)

// Module with useful variables and types.
// Variables: time, delta, platform
// Constants: black, white, red, green, blue, yellow, magenta, cyan.

import (
	"std.um"
)

// standard type for real values
type fu* = real32
// standard type for integer values
type iu* = int16
// standard type for unsigned values
type uu* = uint16

// vector 2
type Vf2* = struct {
	x, y: fu
}

// Vf2 constructor
fn mkVf2*(x: fu = 0, y: fu = 0): Vf2 {
	return Vf2{x, y}
}

// rotates `p` around `origin` with `rot` in degrees
fn (p: ^th.Vf2) rotated*(origin: th.Vf2, rot: th.fu): th.Vf2 {
	angle := (rot * std.pi) / 180

	pos := p^
	pos.x -= origin.x
	pos.y -= origin.y

	x := pos.x * cos(angle) - pos.y * sin(angle)
	y := pos.x * sin(angle) + pos.y * cos(angle)

	pos.x = x + origin.x
	pos.y = y + origin.y

	return pos
}

// distance between p1 and p2
fn (p1: ^th.Vf2) distanceTo*(p2: th.Vf2): th.fu {
	return std.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y))
}

// Angle between p1 and p2
fn (p1: ^th.Vf2) angleTo*(p2: th.Vf2): real {
	if p1.x == p2.x && p1.y == p2.y { return 0 }
	return atan2(p2.y - p1.y, p2.x - p1.x) * 180 / std.pi + 180
}

// Absolute value of a vector.
fn (p: ^th.Vf2) abs*(): th.Vf2 {
	return th.Vf2{fabs(p.x), fabs(p.y)}
}

// Rounds a vector.
fn (p: ^th.Vf2) rnd*(): th.Vf2 {
	return th.Vf2{round(p.x), round(p.y)}
}

// Truncates a vector.
fn (p: ^th.Vf2) flr*(): th.Vf2 {
	return th.Vf2{trunc(p.x), trunc(p.y)}
}

// Subtracts a vector from another one.
fn (p: ^th.Vf2) sub*(p2: th.Vf2): th.Vf2 {
	return th.Vf2{p.x - p2.x, p.y - p2.y}
}

// Adds a vector to another one.
fn (p: ^th.Vf2) add*(p2: th.Vf2): th.Vf2 {
	return th.Vf2{p.x + p2.x, p.y + p2.y}
}

// Divides a vector by another one.
fn (p: ^th.Vf2) div*(p2: th.Vf2): th.Vf2 {
	return th.Vf2{p.x / p2.x, p.y / p2.y}
}

// Multiplies a vector by another one.
fn (p: ^th.Vf2) mul*(p2: th.Vf2): th.Vf2 {
	return th.Vf2{p.x * p2.x, p.y * p2.y}
}

// Returns the magnitude of a vector p.
fn (p: ^th.Vf2) mag*(): th.fu {
	return sqrt(p.x * p.x + p.y * p.y)
}

// Normalizes a vector in such a way atleas one values is 1 (unless mag is 0).
fn (p: ^th.Vf2) norm*(): th.Vf2 {
	if p.x == 0 && p.y == 0 {
		return p^
	}

	a := p.abs()
	o := p^
	if a.x > a.y {
		o.x /= a.x
		o.y /= a.x
	} else {
		o.y /= a.y
		o.x /= a.y
	}

	return o
}

// Struct defining transformation. Used for example by entities.
type Transform* = struct {
	p: Vf2 // position
	s: Vf2 // scale
	o: Vf2 // origin
	r: fu  // rotation
}

// Transform constructor
fn mkTransform*(p: Vf2, s: Vf2 = Vf2{1, 1}, o: Vf2 = Vf2{0, 0}, r: fu = 0.0): Transform {
	return Transform{p: p, s: s, o: o, r: r}
}

const (
	black* = 0xff
	white* = 0xffffffff
	red* = 0xff0000ff
	green* = 0x00ff00ff
	blue* = 0x0000ffff
	yellow* = 0xffff00ff
	magenta* = 0xff00ffff
	cyan* = 0x00ffffff
)

var (
	time*: uint
	delta*: int
	platform*: str = "linux"
)

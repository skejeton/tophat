// Module for interacting with tophat. w and h variables store the size of the
// window.

import (
	"th.um"
	"canvas.um"
	"rect.um"
	"input.um"
	"std.um"
)

var (
	start, end, clockOffset: real
	w*, h*: int32
)

fn getTime(): int

fn wsetup(title: str, w, h: int)
fn clearframe()
fn getdimensions(w, h: ^int32)
fn swapbuffers()
fn handleinput(): bool

// Sets up the engine and opens a window.
fn setup*(title: str, width, height: int32) {
	w, h = width, height
	wsetup(title, width, height)
	clearframe()

	if std.getenv("HOME") == "" {
		th.platform = "windows"
	}

	clockOffset = std.clock() * 1000
	start = std.clock() * 1000
}

// Sets window title on runtime
//fn setwindowtitle*(title: str)
fn updatescaling(w, h, camw, camh: int32)

// Cycle needs to be called every cycle. Pass the currently used camera, which
// i used to calculate tophat's scaling. It returns true, if the window is
// still running.
fn cycle*(cam: rect.Rect): bool {
	canvas.drawRect(th.black, rect.Rect{0, -h, w, h})
	canvas.drawRect(th.black, rect.Rect{-w, 0, w, h})
	canvas.drawRect(th.black, rect.Rect{0, cam.h, w, h})
	canvas.drawRect(th.black, rect.Rect{cam.w, 0, w, h})
	swapbuffers()

	end = std.clock()*1000
	th.delta = round(end - start)
	start = std.clock()*1000
	th.time = round(start - clockOffset)

	clearframe()
	running := handleinput()
	getdimensions(&w, &h)

	updatescaling(w, h, round(cam.w), round(cam.h))
	return running
}

fn umth_window_begin_scissor(x, y: int, w, h: uint)
fn umth_window_end_scissor()
// Disable rendering outside of rect `r`
fn beginScissorRect*(r: rect.Rect) {
	umth_window_begin_scissor(trunc(r.x), trunc(r.y), trunc(r.w), trunc(r.h))
}

// Stops cropping
fn endScissor*() {
	umth_window_end_scissor();
}

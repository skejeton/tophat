import (
	"rect.um"
	"th.um"
)

// Represents a drawable image. It is an opaque structure.
// Images support a color filter. It is applied by multiplying the color
// of each pixel with the filter.
type Image* = struct{ _: ^struct{} }

fn loadimg(ret: ^Image, path: str)
fn flipvimg(i: Image, f: bool)
fn fliphimg(i: Image, f: bool)
fn cdrawimage(img: Image, t: ^th.Transform, color: uint32)
fn imggetdims(dm: ^th.Vf2, i: Image)
fn imgcrop(img: Image, tl, br: th.Vf2)
fn imgcropquad(img: Image, q: ^th.Quad)
fn imggetcropquad(img: Image, q: ^th.Quad)
fn imgfromdata(ret: ^Image, data: ^uint32, dm: th.Vf2)
fn imgcopy(ret: ^Image, data: Image)
fn imgsetfilter(data: Image, filter: int)
fn imgdrawonquad(img: Image, color: uint32, q: th.Quad)
fn imgdrawninepatch(img: Image, outer, inner, dest: ^rect.Rect, color: uint32)
fn imgupdatedata(img: Image, data: ^uint32, dm: th.Vf2)
fn imggetdata(img: Image, data: ^uint32)
fn imgmakerendertarget(img: Image)
fn imgremoverendertarget(cam: ^rect.Rect)

// Loads an image at path.
fn load*(path: str): Image {
	img := Image{}
	loadimg(&img, path)
	return img
}

// Flips image on it's vertical axis.
fn (i: ^Image) flipv*(flip: bool) {
	flipvimg(i^, flip)
}

// Flips image on it's horizontal axis.
fn (i: ^Image) fliph*(flip: bool) {
	fliphimg(i^, flip)
}

// Draws the image in screen coordinates. It transforms it with t and
// applies color as a color filter.
fn (i: ^Image) draw*(t: th.Transform, color: uint32 = th.white) {
	cdrawimage(i^, &t, color)
}

// Draws "nine-patch" image. 
// `outer` specifies the texture coordinates of the outer rect of source image,
// `inner` specifies coordinates of inner rect of source image, positioned relative to `outer`.
// You can tint with `color`.
fn (i: ^Image) drawNinepatch*(outer, inner, dest: rect.Rect, color: uint32 = th.white) {
	imgdrawninepatch(i^, &outer, &inner, &dest, color)
}

// Draws the image on top of a quad with corners of the image positioned
// on the verticies of the quad.
fn (i: ^Image) drawOnQuad*(q: th.Quad, color: uint32 = th.white) {
	imgdrawonquad(i^, color, q)
}

// Returns true, if i's handle points to an image.
fn (i: ^Image) validate*(): bool {
	return i._ != null
}

// Returns width and heigth.
fn (i: ^Image) getDims*(): th.Vf2 {
	out := th.Vf2{}
	imggetdims(&out, i^)

	return out
}

// Crops an image. Coordinates are between 0, 0 (top left) and
// 1, 1 (bottom right)
fn (i: ^Image) crop*(tl, br: th.Vf2) {
	imgcrop(i^, tl, br)
}

// Crop an image using a quad.
fn (i: ^Image) cropQuad*(q: th.Quad) {
	imgcropquad(i^, &q)
}

// Crop an image using a quad.
fn (i: ^Image) getCropQuad*(): th.Quad {
	var (q: th.Quad)
	imggetcropquad(i^, &q)
	return q
}

// Creates an image from raw data.
fn mk*(data: []uint32, dm: th.Vf2): Image {
	img := Image{}
	imgfromdata(&img, &data[0], dm)

	return img
}

// Copies image into a new one.
fn (i: ^Image) copy*(): Image {
	img := Image{}
	imgcopy(&img, i^)
	
	return img
}

// Sets a mag/min filter. 0 is linear, others are nearest.
// This function will regenerate the texture. This means it shouldn't be
// used in a loop.
// https://learnopengl.com/img/getting-started/texture_filtering.png
// left is nearest, right is linear.
fn (i: ^Image) setfilter*(filter: int) {
	imgsetfilter(i^, filter)
}

// Updates the image data. dm are the dimensions of the new image.
// The new image doesn't have to be the same size as the old one.
fn (i: ^Image) setData*(data: []uint32, dm: th.Vf2) {
	if dm.x * dm.y != len(data) {
		error("setData: incorrect dimensions: " + repr(dm.x * dm.y) + "!= " + repr(len(data)))
	}

	if len(data) == 0 {
		error("setData: can't set empty image")
	}

	imgupdatedata(i^, &data[0], dm)
}

// Gets the image data.
fn (i: ^Image) getData*(): []uint32 {
	if i._ == null {
		return []uint32{}
	}

	buf := make([]uint32, trunc(i.getDims().x * i.getDims().y))
	if len(buf) == 0 {
		return buf
	}

	imggetdata(i^, &buf[0])

	return buf
}

fn (i: ^Image) makeRenderTarget*() {
	imgmakerendertarget(i^)
}

fn removeRenderTarget*(cam: rect.Rect) {
	imgremoverendertarget(&cam)
}


import (
	"th.um"
	"ui.um"
)

// A Grid container. The grid size is fixed, not dynamic like in Tk.
type Grid* = struct {
	g: ui.Generic
	w, h: th.uu
	border: th.fu
	elements: []ui.Element
}

// Grid's constructor
fn mk*(w, h: th.uu, border: th.fu = 0): Grid {
	return Grid {
		g: ui.mkGeneric(),
		w: w, h: h, border: border}
}

fn (g: ^Grid) get*(): ^ui.Generic {
	return &g.g
}

fn (g: ^Grid) handle*() {
	cellSize := th.Vf2{g.g.r.w/g.w, g.g.r.h/g.h}

	for i:=0; i < len(g.elements); i++ {
		e := &g.elements[i]
		ge := e.get()

		if ge.gridPos.x > g.w || ge.gridPos.y > g.h {
			error("ui.Grid: out of bounds.")
		}

		ge.r.x = ge.gridPos.x * cellSize.x
		ge.r.y = ge.gridPos.y * cellSize.y
		// divide by to as there are two borders
		ge.r.x += g.border/2 + g.g.r.x
		ge.r.y += g.border/2 + g.g.r.y

		if ge.gridPos.x + ge.gridSpan.x > g.w ||
			ge.gridPos.y + ge.gridSpan.y > g.h {
			error("ui.Grid: out of bounds.")
		}

		if ge.gridSpan.x == 0 {
			ge.gridSpan.x = 1
		}

		if ge.gridSpan.y == 0 {
			ge.gridSpan.y = 1
		}

		ge.r.w = ge.gridSpan.x * cellSize.x
		ge.r.h = ge.gridSpan.y * cellSize.y
		// don't divide by two as size is relative to position
		ge.r.w -= g.border
		ge.r.h -= g.border

		e.handle()
	}
}

fn (g: ^Grid) draw*() {
	for e in g.elements {
		e.draw()
	}
}

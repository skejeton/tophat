
import (
	"th.um"
	"ui.um"
	"image.um"
)

// An element containing an image
type Image* = struct {
	g: ui.Generic
	image: image.Image
	stretch: bool
}

fn mk*(i: image.Image, stretch: bool = false): Image {
	return Image {
		g: ui.Generic{},
		image: i,
		stretch: stretch}
}

fn (i: ^Image) get*(): ^ui.Generic {
	return &i.g
}

fn (i: ^Image) handle*() {
	i.g.handle()
}

fn (i: ^Image) draw*() {
	dm := i.image.getDims()
	s := th.Vf2{}
	if i.stretch {
		s.x = i.g.r.w/dm.x
		s.y = i.g.r.h/dm.y
	} else {
		if i.g.r.w < i.g.r.h {
			s.x = i.g.r.w/dm.x
			s.y = s.x
			i.g.r.y += (i.g.r.h - s.y*dm.y)/2
		} else {
			s.y = i.g.r.h/dm.y
			s.x = s.y
			i.g.r.x += (i.g.r.w - s.x*dm.x)/2
		}
	}

	i.image.draw(th.Transform{p: i.g.r.getPos(), s: s}, th.white)
}


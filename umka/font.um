// Module for font rendering. Unicode is supported, but only left to right.

import (
	"th.um"
)

const (
	filterBilinear* = 0
	filterNearest* = 1
)

type Font* = struct { _: ^struct{} }

fn cfontload(path: str, size: th.fu, filter: uint32): ^struct{}
fn cfontdraw(font: Font, s: str, x: th.fu, y: th.fu, color: uint32, scale: th.fu)
fn cfontmeasure(font: Font, s: str, o: ^th.Vf2)

fn load*(path: str, size: th.fu, filter: uint32 = filterBilinear): Font {
	return Font{cfontload(path, size, filter)}
}

fn (f: ^Font) draw*(text: str, pos: th.Vf2, color: uint32, scale: th.fu = 1.0) {
	cfontdraw(f^, text, pos.x, pos.y, color, scale)
}

fn (f: ^Font) validate*(): bool {
	return f._ != null
}

fn (f: ^Font) measure*(text: str): th.Vf2 {
	var size: th.Vf2
	cfontmeasure(f^, text, &size)
	return size
}